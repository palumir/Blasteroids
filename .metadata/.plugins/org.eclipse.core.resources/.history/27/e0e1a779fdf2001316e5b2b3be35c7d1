package com.DJG.fd;

public class Unit {
	private String name;
	private String type; // Chose not to simply store this as a UnitType incase we want to modify individual
	private float x;     // fields to be unique values. In other words, we may want to change an Ogre to be
	private float y;     // really big, but we don't want to have to add a new UnitType every time we do that!
	private float xNew;
	private float yNew;
	private int radius; 
	
	public Unit(String newName, String newType, float xSpawn, float ySpawn) {
		// Look up the UnitType and set the values.
		UnitType u = UnitType.getUnitType(newType);
		radius = u.getRadius();
		type = u.getType();
		
		// Set it's coordinates.
		name = newName;
		type = newType;
		x = xSpawn;
		y = ySpawn;
		xNew = xSpawn;
		yNew = ySpawn;
		
		// Add it to the list of units to be drawn.
		DisplayMessageActivity.addUnit(this);
	}
	
	public void moveNormally(float xGo, float yGo) {
		xNew = xGo;
		yNew = yGo;
	}
	
	public void moveInstantly(float xGo, float yGo) {
		x = xGo;
		y = yGo;
		xNew = xGo;
		yNew = yGo;
	}

	// WIP: This pathing function SUCKS.
	public void moveUnit() {
		float yDistance = (yNew - y);
		float xDistance = (xNew - x);
		float step = 0.1f;
		
		// Move the unit.
		if(xNew != x && yNew != y) {
			x = x + xDistance*step;
			y = y + yDistance*step;
		}
		
		// Just move it if it's close.
		if(Math.abs(yDistance) < step && Math.abs(xDistance) < step) {
			x = xNew;
			y = yNew;
		}
	}
	
	public void die() {
		// Play death animation and fade out?
		x = -1000;
		y = -1000;
		yNew = -1000;
		xNew = -1000;
	}
	
	public String getName() {
		return name;
	}
	
	public String getType() {
		return type;
	}
	
	public float getX() {
		return x;
	}
	
	public float getY() {
		return y;
	}
	
	public float getXNew() {
		return xNew;
	}
	
	public float getYNew() {
		return yNew;
	}
	
	public int getRadius() {
		return radius;
	}
	
	public void setRadius(int newRadius) {
		radius = newRadius;
	}
}