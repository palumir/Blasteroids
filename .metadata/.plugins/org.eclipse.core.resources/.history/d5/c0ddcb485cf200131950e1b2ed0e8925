package com.DJG.fd;

import java.util.ArrayList;
import java.util.Random;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.view.MotionEventCompat;
import android.support.v7.app.ActionBarActivity;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;

public class DisplayMessageActivity extends ActionBarActivity {
    
	// List of all units. This list is constantly redrawn.
	public static ArrayList<Unit> allUnits = new ArrayList<Unit>();
	
	@Override
	public boolean onTouchEvent(MotionEvent event) { 
	    int action = MotionEventCompat.getActionMasked(event);
	    Unit myUnit = DisplayMessageActivity.getUnit("GoodGuy");
        myUnit.moveNormally(event.getRawX(),event.getRawY());
	    return true;
	}
	
	  @Override
	  public void onCreate(Bundle savedInstanceState) {
	         super.onCreate(savedInstanceState);
	         View v = new gameView(this);
	         setContentView(v);
	         initGame();
	         playGame(v);
	  }
	 
	  private class gameView extends View {
	 
	      public gameView(Context context) {
	          super(context);
	      }
	 
	      @Override
	      protected void onDraw(Canvas canvas) {
	          Paint myPaint = new Paint();
	          myPaint.setColor(Color.RED);
	          myPaint.setStyle(Paint.Style.STROKE);
	          myPaint.setStrokeWidth(3);
	          
	          // Draw all of our units (just one for now)
	          for(Unit currentUnit : allUnits) {
	        	  canvas.drawCircle(currentUnit.getX(), currentUnit.getY(), currentUnit.getRadius(), myPaint);
	          }
	      }
	  }

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.display_message, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public static class PlaceholderFragment extends Fragment {

		public PlaceholderFragment() {
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_display_message,
					container, false);
			return rootView;
		}
	}
	
	// Add a new unit to the list of all units to be drawn in animation.
	public static void addUnit(Unit newUnit) {
		allUnits.add(newUnit);
	}
	
	public static Unit getUnit(String nameToSearch) {
		Unit foundUnit = null;
		for(Unit u : allUnits) {
			if(u.getName() == nameToSearch) {
				foundUnit = u;
				break;
			}
		}
		return foundUnit;
	}
	
	void initGame() {
		UnitType.initUnitTypes();
	    Unit u = new Unit("EvilGuy","Ogre",100,100);
	    Unit v = new Unit("GoodGuy","Ogre",250,250);
	}
	
	void runEvilGuy() {
		// Device information
		Display display = getWindowManager().getDefaultDisplay();
		int screenWidth = display.getWidth();
		int screenHeight = display.getHeight();
		Unit evilGuy = DisplayMessageActivity.getUnit("EvilGuy");
		if(evilGuy.getXNew() == evilGuy.getX() && evilGuy.getYNew() == evilGuy.getY()) {
			Random r = new Random();
			evilGuy.moveNormally(r.nextInt(1+screenWidth),r.nextInt(1+screenHeight));
		}
	}
	
	void playGame(final View v) {
		Thread myThread=new Thread(new Runnable() {
			public void run() {
				while(true){
					updateAllUnits();
					runEvilGuy();
					v.postInvalidate();
					try {
						Thread.sleep(10);
					}
					catch (Throwable t) {
					}
				}
			}
		});
		myThread.start();
	}
	
	void updateAllUnits() {
		for(Unit u : allUnits) {
			// Do our unit updates. WIP: This is just movement for now.
			u.moveUnit();
		}
	}

}
